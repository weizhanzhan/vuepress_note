(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{276:function(t,v,a){"use strict";a.r(v);var _=a(32),s=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"前端微服务-single-spa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端微服务-single-spa"}},[t._v("#")]),t._v(" 前端微服务 Single-spa")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("链接")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zh-hans.single-spa.js.org/docs/getting-started-overview",target:"_blank",rel:"noopener noreferrer"}},[t._v("single-spa官网"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://www.cnblogs.com/scdisplay/p/11648701.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("p",[t._v("一种由独立交付的多个前端应用组成整体的架构风格。将前端应用分解成一些更小、更简单的能够独立开发、测试、部署的小块，而在用户看来仍然是内聚的单个产品。")]),t._v(" "),a("p",[t._v("实现一套微前端架构，可以把其分成四部分")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("加载器：也就是微前端架构的核心，主要用来调度子应用，决定何时展示哪个子应用， 可以把它理解成电源。")])]),t._v(" "),a("li",[a("p",[t._v("包装器：有了加载器，可以把现有的应用包装，使得加载器可以使用它们，它相当于电源适配器。")])]),t._v(" "),a("li",[a("p",[t._v("主应用：一般是包含所有子应用公共部分的项目—— 它相当于电器底座")])]),t._v(" "),a("li",[a("p",[t._v("子应用：众多展示在主应用内容区的应用—— 它相当于你要使用的电器")])])]),t._v(" "),a("p",[t._v("所以是这么个概念：电源(加载器)→电源适配器(包装器)→️电器底座(主应用)→️电器(子应用)️")]),t._v(" "),a("p",[t._v("总的来说是这样一个流程：用户访问index.html后，浏览器运行加载器的js文件，加载器去配置文件，然后注册配置文件中配置的各个子应用后，首先加载主应用(菜单等)，再通过路由判定，动态远程加载子应用。")]),t._v(" "),a("h3",{attrs:{id:"为何要微前端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为何要微前端"}},[t._v("#")]),t._v(" 为何要微前端")]),t._v(" "),a("p",[t._v("微前端的实现，意味着对前端应用的拆分。拆分应用的目的，并不只是为了架构上好看，还为了提升开发效率。\n将庞大的整体拆成可控的小块，并明确它们之间的依赖关系。关键优势在于：")]),t._v(" "),a("ul",[a("li",[t._v("代码库更小，更内聚、可维护性更高")]),t._v(" "),a("li",[t._v("松耦合、自治的团队可扩展性更好")]),t._v(" "),a("li",[t._v("渐进地升级、更新甚至重写部分前端功能成为了可能")])]),t._v(" "),a("h4",{attrs:{id:"简单、松耦合的代码库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单、松耦合的代码库"}},[t._v("#")]),t._v(" 简单、松耦合的代码库")]),t._v(" "),a("p",[t._v("比起一整块的前端代码库，微前端架构下的代码库倾向于更小/简单、更容易开发")]),t._v(" "),a("p",[t._v("此外，更重要的是避免模块间不合理的隐式耦合造成的复杂度上升。通过界定清晰的应用边界来降低意外耦合的可能性，增加子应用间逻辑耦合的成本，促使开发者明确数据和事件在应用程序中的流向")]),t._v(" "),a("h4",{attrs:{id:"增量升级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增量升级"}},[t._v("#")]),t._v(" 增量升级")]),t._v(" "),a("p",[t._v("理想的代码自然是模块清晰、依赖明确、易于扩展、便于维护的……然而，实践中出于各式各样的原因：")]),t._v(" "),a("ul",[a("li",[t._v("历史项目，祖传代码")]),t._v(" "),a("li",[t._v("交付压力，当时求快")]),t._v(" "),a("li",[t._v("就近就熟，当时求稳……")])]),t._v(" "),a("p",[t._v("总存在一些不那么理想的代码")]),t._v(" "),a("ul",[a("li",[t._v("技术栈落后，甚至强行混用多种技术栈")]),t._v(" "),a("li",[t._v("耦合混乱，不敢动，牵一发何止动全身")]),t._v(" "),a("li",[t._v("重构不彻底，重构-烂尾，换个姿势重构-又烂尾……")])]),t._v(" "),a("h4",{attrs:{id:"部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[t._v("#")]),t._v(" 部署")]),t._v(" "),a("ul",[a("li",[t._v("原项目牵一发而动全身")]),t._v(" "),a("li",[t._v("初始化项目会加载整个的项目静态资源文件和相关的其他文件")]),t._v(" "),a("li",[t._v("技术栈升级压力大")])]),t._v(" "),a("h3",{attrs:{id:"原有项目改造"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原有项目改造"}},[t._v("#")]),t._v(" 原有项目改造")]),t._v(" "),a("h4",{attrs:{id:"vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[t._v("#")]),t._v(" Vue")])])}),[],!1,null,null,null);v.default=s.exports}}]);